# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core


trigger:
  branches:
    include:
    - master
    
stages:

- stage: Test
  jobs:
  - job: Test
    pool:
      vmImage: 'windows-latest'
    
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    
    steps:
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '$(Parameters.UnitTestProjects)'
        arguments: '--configuration $(BuildConfiguration)'

- stage: Build
  jobs:
  - job: Build

    pool:
      vmImage: 'windows-latest'
    
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
     
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/*.csproj'
    
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)' # Update this to match your need

    

- stage: Publish
  jobs:
  - job: Publish
    pool:
      vmImage: 'windows-latest'
    
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output "$(build.artifactstagingdirectory)"'
        zipAfterPublish: True

    - task: DotNetCoreCLI@2
      displayName: 'Publish functional tests'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/*FunctionalTest*.csproj'
        arguments: '--configuration $(BuildConfiguration) --output "$(build.artifactstagingdirectory)/FunctionalTests"'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: CopyFiles@2
      displayName: 'Copy runsettings file'
      inputs:
        Contents: '**/*.runsettings'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/FunctionalTests'
        flattenFolders: true

    - task: CopyFiles@2
      displayName: 'Copy ARM templates'
      inputs:
        SourceFolder: ArmTemplates
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'